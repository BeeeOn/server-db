[beeeon]
gateways.create           = INSERT INTO beeeon.gateways (id, name, altitude, latitude, longitude, timezone) VALUES ($1::bigint, $2::varchar, $3::integer, $4::double precision, $5::double precision, $6::varchar(64))
gateways.fetch_by_id      = SELECT g.id AS id, g.name AS name, g.altitude AS altitude, g.latitude AS latitude, g.longitude AS longitude, g.timezone AS timezone, extract(epoch from s.at)::bigint AS last_changed, s.version AS version, host(s.ip)::varchar(45) AS ip FROM beeeon.gateways AS g LEFT JOIN beeeon.gateways_status AS s ON g.id = s.gateway_id WHERE g.id = $1::bigint AND (s.at IS NULL OR s.at = beeeon.gateways_status_most_recent(g.id)) LIMIT 1
gateways.update           = UPDATE beeeon.gateways SET name = $2::varchar, altitude = $3::integer, latitude = $4::double precision, longitude = $5::double precision, timezone = $6::varchar(64) WHERE id = $1::bigint
gateways.fetch_accessible = SELECT DISTINCT g.id AS id, g.name AS name, g.altitude AS altitude, g.latitude AS latitude, g.longitude AS longitude, g.timezone AS timezone, extract(epoch from s.at)::bigint AS last_changed, s.version AS version, host(s.ip)::varchar(45) AS ip FROM beeeon.gateways AS g JOIN beeeon.roles_in_gateway AS r ON g.id = r.gateway_id JOIN beeeon.verified_identities AS v ON v.identity_id = r.identity_id LEFT JOIN beeeon.gateways_status AS s ON s.gateway_id = g.id WHERE v.user_id = $1::uuid AND (s.at IS NULL OR s.at = beeeon.gateways_status_most_recent(g.id))
gateways_status.insert    = WITH input AS (SELECT $1::bigint AS gateway_id, beeeon.as_utc_timestamp($2) AS at, $3::varchar(40) AS version, $4::inet AS ip), status AS (SELECT count(*) > 0 AS same FROM beeeon.gateways_status AS s, input WHERE s.gateway_id = input.gateway_id AND s.version = input.version AND s.ip = input.ip AND s.at = beeeon.gateways_status_most_recent(input.gateway_id)) INSERT INTO beeeon.gateways_status (gateway_id, at, version, ip) SELECT input.gateway_id, input.at, input.version, input.ip FROM input, status WHERE NOT status.same

locations.create          = INSERT INTO beeeon.locations (id, name, gateway_id) VALUES ($1::uuid, $2::varchar, $3::bigint)
locations.fetch_by_id     = SELECT id, name, gateway_id FROM beeeon.locations WHERE id = $1 LIMIT 1
locations.fetch_by_gateway_id = SELECT id, name, gateway_id FROM beeeon.locations WHERE gateway_id = $1::bigint
locations.fetch_by_id_and_gateway_id = SELECT id, name, gateway_id FROM beeeon.locations WHERE id = $1::uuid AND gateway_id = $2::bigint
locations.update          = UPDATE beeeon.locations SET name = $2 WHERE id = $1
locations.remove          = DELETE FROM beeeon.locations WHERE id = $1

users.create              = INSERT INTO beeeon.users (id, first_name, last_name, locale) VALUES ($1::uuid, $2::varchar, $3::varchar, $4::varchar)
users.fetch_by_id         = SELECT id, first_name, last_name, locale FROM beeeon.users WHERE id = $1 LIMIT 1

fcm_tokens.create           = INSERT INTO beeeon.fcm_tokens (token, user_id) VALUES ($1, $2)
fcm_tokens.remove           = DELETE FROM beeeon.fcm_tokens WHERE token = $1
fcm_tokens.replace          = WITH input AS (SELECT $1 AS token_from, $2 AS token_to), do_insert AS (INSERT INTO beeeon.fcm_tokens SELECT input.token_to, user_id FROM beeeon.fcm_tokens, input WHERE token = input.token_from) DELETE FROM beeeon.fcm_tokens WHERE token IN (SELECT token_from FROM input)
fcm_tokens.fetch_by_id      = SELECT t.token AS token, u.id AS user_id, u.first_name AS user_first_name, u.last_name AS user_last_name, u.locale AS user_locale FROM beeeon.fcm_tokens AS t JOIN beeeon.users AS u ON t.user_id = u.id WHERE t.token = $1 LIMIT 1
fcm_tokens.fetch_by_user_id = SELECT token, user_id FROM beeeon.fcm_tokens WHERE user_id = $1
fcm_recipients.by_gateway   = SELECT t.token AS token, t.user_id AS user_id, u.first_name AS user_first_name, u.last_name AS user_last_name, u.locale AS user_locale FROM beeeon.fcm_tokens AS t JOIN beeeon.verified_identities AS v ON t.user_id = v.user_id JOIN beeeon.roles_in_gateway AS r ON r.identity_id = v.identity_id JOIN beeeon.users AS u ON u.id = t.user_id WHERE r.gateway_id = $1

identities.create         = INSERT INTO beeeon.identities (id, email) VALUES ($1, $2)
identities.fetch_by_id    = SELECT * FROM beeeon.identities WHERE id = $1
identities.fetch_by_email = SELECT id, email FROM beeeon.identities WHERE email = $1 LIMIT 1
identities.remove         = DELETE FROM beeeon.identities WHERE id = $1

verified_identities.create         = INSERT INTO beeeon.verified_identities (id, identity_id, user_id, provider, picture, access_token) VALUES ($1, $2, $3, $4, $5, $6)
verified_identities.fetch_by_id    = SELECT v.id AS id, v.identity_id AS identity_id, v.user_id AS user_id, v.provider AS provider, v.picture AS picture, v.access_token AS access_token, i.email AS identity_email, u.first_name AS user_first_name, u.last_name AS user_last_name FROM beeeon.verified_identities AS v JOIN beeeon.identities AS i ON v.identity_id = i.id JOIN beeeon.users AS u ON v.user_id = u.id WHERE v.id = $1 LIMIT 1
verified_identities.fetch_by_email_and_provider = SELECT v.id AS id, v.identity_id AS identity_id, v.user_id AS user_id, v.provider AS provider, v.picture AS picture, v.access_token AS access_token, i.email AS identity_email, u.first_name AS user_first_name, u.last_name AS user_last_name FROM beeeon.verified_identities AS v JOIN beeeon.identities AS i ON v.identity_id = i.id JOIN beeeon.users AS u ON v.user_id = u.id WHERE i.email = $1 AND v.provider = $2 LIMIT 1
verified_identities.fetch_by_email = SELECT v.id AS id, v.identity_id AS identity_id, v.user_id AS user_id, v.provider AS provider, v.picture AS picture, v.access_token AS access_token, i.email AS identity_email, u.first_name AS user_first_name, u.last_name AS user_last_name FROM beeeon.verified_identities AS v JOIN beeeon.identities AS i ON v.identity_id = i.id JOIN beeeon.users AS u ON v.user_id = u.id WHERE i.email = $1 ORDER BY provider
verified_identities.fetch_by_user  = SELECT v.id AS id, v.identity_id AS identity_id, v.user_id AS user_id, v.provider AS provider, v.picture AS picture, v.access_token AS access_token, i.email AS identity_email, u.first_name AS user_first_name, u.last_name AS user_last_name FROM beeeon.verified_identities AS v JOIN beeeon.identities AS i ON v.identity_id = i.id JOIN beeeon.users AS u ON v.user_id = u.id WHERE u.id = $1 ORDER BY provider, id
verified_identities.update         = UPDATE beeeon.verified_identities SET picture = $2, access_token = $3 WHERE id = $1
verified_identities.remove         = DELETE FROM beeeon.verified_identities WHERE id = $1

roles_in_gateway.create              = INSERT INTO beeeon.roles_in_gateway (id, gateway_id, identity_id, level, created) VALUES ($1, $2, $3, $4, beeeon.as_utc_timestamp($5))
roles_in_gateway.update              = UPDATE beeeon.roles_in_gateway SET level = $2 WHERE id = $1
roles_in_gateway.fetch_by_id         = SELECT r.id AS id, r.gateway_id AS gateway_id, i.id AS identity_id, r.level AS level, extract(epoch FROM r.created)::bigint AS created, i.email AS identity_email FROM beeeon.roles_in_gateway AS r JOIN beeeon.identities AS i ON r.identity_id = i.id WHERE r.id = $1 LIMIT 1
roles_in_gateway.fetch_by_gateway_id = SELECT r.id AS id, r.gateway_id AS gateway_id, r.identity_id AS identity_id, r.level AS level, extract(epoch FROM r.created)::bigint AS created, i.email AS identity_email FROM beeeon.roles_in_gateway AS r JOIN beeeon.identities AS i ON r.identity_id = i.id WHERE r.gateway_id = $1
roles_in_gateway.remove              = DELETE FROM beeeon.roles_in_gateway WHERE id = $1
roles_in_gateway.remove_user         = DELETE FROM beeeon.roles_in_gateway WHERE identity_id IN (SELECT identity_id FROM beeeon.verified_identities WHERE user_id = $1) AND gateway_id = $2
roles_in_gateway.remove_all          = DELETE FROM beeeon.roles_in_gateway WHERE gateway_id = $1
roles_in_gateway.is_user             = SELECT EXISTS(SELECT 1 FROM beeeon.roles_in_gateway AS r JOIN beeeon.verified_identities AS v ON r.identity_id = v.identity_id JOIN beeeon.users AS u ON u.id = v.user_id WHERE r.id = $1 AND u.id = $2)
roles_in_gateway.is_registered       = SELECT EXISTS(SELECT 1 FROM beeeon.roles_in_gateway WHERE gateway_id = $1)
roles_in_gateway.has_only_given_level_except = SELECT EXISTS(SELECT 1 FROM beeeon.roles_in_gateway WHERE level > $1 AND gateway_id = $2 AND identity_id NOT IN (SELECT identity_id FROM beeeon.verified_identities WHERE user_id = $3))
roles_in_gateway.can_see_identity = WITH input AS (SELECT $1::uuid AS identity_id, $2::uuid AS user_id), user_is AS (SELECT EXISTS (SELECT * FROM beeeon.verified_identities AS v, input WHERE v.user_id = input.user_id AND v.identity_id = input.identity_id) AS self), user_can AS (SELECT EXISTS (SELECT * FROM beeeon.roles_in_gateway AS r CROSS JOIN input JOIN beeeon.users_of_gateway AS u ON u.gateway_id = r.gateway_id WHERE r.identity_id = input.identity_id AND u.user_id = input.user_id) AS see) SELECT user_is.self OR user_can.see FROM user_is, user_can
roles_in_gateway.can_see_verified_identity = WITH input AS (SELECT $1::uuid AS identity_id, $2::uuid AS user_id), user_is AS (SELECT EXISTS (SELECT * FROM beeeon.verified_identities AS v, input WHERE v.user_id = input.user_id AND v.id = input.identity_id) AS self), can_see AS (SELECT EXISTS (SELECT * FROM beeeon.roles_in_gateway AS r CROSS JOIN input JOIN beeeon.users_of_gateway AS u ON u.gateway_id = r.gateway_id JOIN beeeon.verified_identities AS v ON v.identity_id = r.identity_id WHERE v.id = input.identity_id AND u.user_id = input.user_id) AS identity) SELECT user_is.self OR can_see.identity FROM user_is, can_see
roles_in_gateway.fetch_access_level  = SELECT MIN(r.level) FROM beeeon.roles_in_gateway AS r JOIN beeeon.verified_identities AS v ON v.identity_id = r.identity_id WHERE r.gateway_id = $1 AND v.user_id = $2
roles_in_gateway.fetch_accessible_gateways = SELECT DISTINCT g.id AS id, g.name AS name, g.altitude AS altitude, g.latitude AS latitude, g.longitude AS longitude, g.timezone AS timezone, extract(epoch FROM s.at)::bigint AS last_changed, s.version AS version, host(s.ip)::varchar(45) AS ip FROM beeeon.gateways AS g JOIN beeeon.gateways_status AS s ON s.gateway_id = g.id JOIN beeeon.roles_in_gateway AS r ON r.gateway_id = g.id JOIN beeeon.verified_identities AS v ON v.identity_id = r.identity_id WHERE r.level >= $1 AND v.user_id = $2 AND (s.at IS NULL OR s.at = beeeon.gateways_status_most_recent(g.id))

legacy_roles_in_gateway.fetch_by_id = SELECT r.id AS id, r.gateway_id AS gateway_id, r.identity_id AS identity_id, r.level AS level, extract(epoch FROM r.created)::bigint AS created, i.email AS identity_email, u.first_name AS first_name, u.last_name AS last_name, v.picture AS picture, g.owner_id = u.id AS is_owner FROM beeeon.roles_in_gateway AS r JOIN beeeon.identities AS i ON r.identity_id = i.id JOIN beeeon.legacy_gateways AS g ON g.id = r.gateway_id JOIN beeeon.verified_identities AS v on r.identity_id = v.identity_id JOIN beeeon.users AS u ON u.id = v.user_id WHERE r.id = $1 LIMIT 1
legacy_roles_in_gateway.fetch_by_gateway_id = SELECT r.id AS id, r.gateway_id AS gateway_id, r.identity_id AS identity_id, r.level AS level, extract(epoch FROM r.created)::bigint AS created, i.email AS identity_email, u.first_name AS first_name, u.last_name AS last_name, v.picture AS picture, g.owner_id = u.id AS is_owner FROM beeeon.roles_in_gateway AS r JOIN beeeon.identities AS i ON r.identity_id = i.id JOIN beeeon.legacy_gateways AS g ON g.id = r.gateway_id JOIN beeeon.verified_identities AS v on r.identity_id = v.identity_id JOIN beeeon.users AS u ON u.id = v.user_id WHERE r.gateway_id = $1 ORDER BY r.level, i.email

legacy_gateways.fetch_by_id = SELECT g.id AS id, g.name AS name, g.altitude AS altitude, g.latitude AS latitude, g.longitude AS longitude, g.timezone AS timezone, extract(epoch from s.at)::bigint AS last_changed, s.version AS version, host(s.ip)::varchar(45) AS ip, g.roles_count AS roles_count, g.devices_count AS devices_count, g.owner_id AS owner_id, o.first_name AS owner_first_name, o.last_name AS owner_last_name, (SELECT level FROM beeeon.users_of_gateway WHERE gateway_id = g.id AND user_id = $1) AS access_level FROM beeeon.legacy_gateways AS g LEFT JOIN beeeon.gateways_status AS s ON s.gateway_id = g.id LEFT JOIN beeeon.users AS o ON o.id = g.owner_id WHERE g.id = $2 AND (s.at IS NULL OR s.at = beeeon.gateways_status_most_recent(g.id)) LIMIT 1
legacy_gateways.fetch_accessible = SELECT DISTINCT g.id AS id, g.name AS name, g.altitude AS altitude, g.latitude AS latitude, g.longitude AS longitude, g.timezone AS timezone, extract(epoch from s.at)::bigint AS last_changed, s.version AS version, host(s.ip)::varchar(45) AS ip, g.roles_count AS roles_count, g.devices_count AS devices_count, g.owner_id AS owner_id, o.first_name AS owner_first_name, o.last_name AS owner_last_name, u.level AS access_level FROM beeeon.legacy_gateways AS g JOIN beeeon.users_of_gateway AS u ON u.gateway_id = g.id LEFT JOIN beeeon.gateways_status AS s ON s.gateway_id = g.id LEFT JOIN beeeon.users AS o ON o.id = g.owner_id WHERE u.user_id = $1 AND (s.at IS NULL OR s.at = beeeon.gateways_status_most_recent(g.id))

devices.create             = INSERT INTO beeeon.devices (id, gateway_id, location_id, name, type, refresh, battery, signal, first_seen, last_seen, active_since) VALUES (beeeon.to_device_id($1), $2, $3, $4, $5, $6, $7, $8, beeeon.as_utc_timestamp($9), beeeon.as_utc_timestamp($10), beeeon.as_utc_timestamp($11))
devices.update             = UPDATE beeeon.devices SET location_id = $1, name = $2, type = $3, refresh = $4, battery = $5, signal = $6, last_seen = NOW(), active_since = beeeon.as_utc_timestamp($7) WHERE id = beeeon.to_device_id($8) AND gateway_id = $9
devices.fetch_from_gateway = SELECT beeeon.from_device_id(id) AS id, gateway_id AS gateway_id, location_id AS location_id, name AS name, type AS type, refresh AS refresh, battery AS battery, signal AS signal, extract(epoch FROM first_seen)::bigint AS first_seen, extract(epoch FROM last_seen)::bigint AS last_seen, extract(epoch FROM active_since)::bigint AS active_since FROM beeeon.devices WHERE id = beeeon.to_device_id($1) AND gateway_id = $2 LIMIT 1
devices.fetch_active_by_gateway   = SELECT beeeon.from_device_id(id) AS id, gateway_id AS gateway_id, location_id AS location_id, name AS name, type AS type, refresh AS refresh, battery AS battery, signal AS signal, extract(epoch FROM first_seen)::bigint AS first_seen, extract(epoch FROM last_seen)::bigint AS last_seen, extract(epoch FROM active_since)::bigint AS active_since FROM beeeon.devices WHERE active_since IS NOT NULL AND gateway_id = $1
devices.fetch_inactive_by_gateway = SELECT beeeon.from_device_id(id) AS id, gateway_id AS gateway_id, location_id AS location_id, name AS name, type AS type, refresh AS refresh, battery AS battery, signal AS signal, extract(epoch FROM first_seen)::bigint AS first_seen, extract(epoch FROM last_seen)::bigint AS last_seen, NULL::bigint AS active_since FROM beeeon.devices WHERE active_since IS NULL AND gateway_id = $1
devices.fetch_active_by_gateway_with_prefix = SELECT beeeon.from_device_id(id) AS id, gateway_id AS gateway_id, location_id AS location_id, name AS name, type AS type, refresh AS refresh, battery AS battery, signal AS signal, extract(epoch FROM first_seen)::bigint AS first_seen, extract(epoch FROM last_seen)::bigint AS last_seen, extract(epoch FROM active_since)::bigint AS active_since FROM beeeon.devices WHERE id >= beeeon.to_device_id($2) AND id <= beeeon.to_device_id($3) AND active_since IS NOT NULL AND gateway_id = $1;

devices_properties.insert  = INSERT INTO beeeon.device_properties(device_id, gateway_id, key, value, params) VALUES (beeeon.to_device_id($1), $2, $3, $4, $5)
devices_properties.update  = UPDATE beeeon.device_properties SET value = $1, params = $2 WHERE device_id = beeeon.to_device_id($3) AND gateway_id = $4 AND key = $5
devices_properties.remove  = DELETE FROM beeeon.device_properties WHERE device_id = beeeon.to_device_id($1) AND gateway_id = $2 AND key = $3
devices_properties.fetch   = SELECT beeeon.from_device_id(device_id), gateway_id, key, value, params FROM beeeon.device_properties WHERE device_id = beeeon.to_device_id($1) AND gateway_id = $2 AND key = $3
devices_properties.fetch_by_device = SELECT beeeon.from_device_id(device_id), gateway_id, key, value, params FROM beeeon.device_properties WHERE device_id = beeeon.to_device_id($1) AND gateway_id = $2

sensors_history.insert = INSERT INTO beeeon.sensor_history_recent (gateway_id, device_id, module_id, at, value) VALUES ($1::bigint, beeeon.to_device_id($2::numeric(20, 0)), $3::smallint, beeeon.as_utc_timestamp_us($4), $5::real)
sensors_history.fetch = SELECT extract(epoch FROM at)::bigint, value FROM beeeon.sensor_history_last WHERE gateway_id = $1 AND device_id = beeeon.to_device_id($2) AND module_id = $3
sensors_history.fetch_huge_interval = SELECT * FROM beeeon.sensor_history_recent_aggregate($1::bigint, $2::numeric(20, 0), $3::smallint, $4::bigint, $5::bigint, $6::bigint)
sensors_history.huge_fetch_raw = SELECT extract(epoch FROM s.at)::bigint, s.value FROM beeeon.sensor_history_recent AS s WHERE s.gateway_id = $1::bigint AND s.device_id = beeeon.to_device_id($2::numeric(20, 0)) AND s.module_id = $3::smallint AND beeeon.as_utc_timestamp($4::bigint) <= s.at AND s.at < beeeon.as_utc_timestamp($5::bigint) ORDER BY s.at
sensors_history.huge_fetch_agg = WITH input AS (SELECT $1 AS gateway_id, $2 AS device_id, $3 AS module_id, beeeon.as_utc_timestamp($4) AS start_ts, beeeon.as_utc_timestamp($5) AS end_ts, $6 AS secs_interval) SELECT extract(epoch FROM s.at - interval '1 second' * ((60 * date_part('minute', s.at)::bigint + date_part('second', s.at)::bigint) % input.secs_interval))::bigint AS at, AVG(s.value)::real AS avg, MIN(s.value)::real AS min, MAX(s.value)::real AS max FROM beeeon.sensor_history_recent AS s, input WHERE s.gateway_id = input.gateway_id AND s.device_id = beeeon.to_device_id(input.device_id) AND s.module_id = input.module_id AND input.start_ts <= s.at AND s.at < input.end_ts AND s.value IS NOT NULL GROUP BY 1 ORDER BY 1

controls_fsm.insert_request = INSERT INTO beeeon.controls_fsm (gateway_id, device_id, module_id, value, requested_at, accepted_at, finished_at, failed, originator_user_id) VALUES ($1::bigint, beeeon.to_device_id($2::numeric(20, 0)), $3::smallint, $4::real, beeeon.as_utc_timestamp_us($5), beeeon.as_utc_timestamp_us($6), beeeon.as_utc_timestamp_us($7), $8::boolean, $9::uuid)
controls_fsm.update_request = UPDATE beeeon.controls_fsm SET accepted_at = beeeon.as_utc_timestamp_us($1), finished_at = beeeon.as_utc_timestamp_us($2), failed = $3::boolean WHERE gateway_id = $4::bigint AND device_id = beeeon.to_device_id($5::numeric(20, 0)) AND module_id = $6 AND requested_at = beeeon.as_utc_timestamp_us($7)
controls_fsm.fetch_last = SELECT f.value as requested_value, (extract(epoch from f.requested_at) * 1000000)::bigint AS requested_at, (extract(epoch from f.accepted_at) * 1000000)::bigint AS accepted_at, (extract(epoch from f.finished_at) * 1000000)::bigint AS finished_at, f.failed AS failed, f.originator_user_id AS originator_user_id, (extract(epoch from r.at) * 1000000)::bigint AS recent_at, r.value AS recent_value FROM beeeon.controls_fsm_last f FULL OUTER JOIN beeeon.sensor_history_last r ON f.gateway_id = r.gateway_id AND f.device_id = r.device_id AND f.module_id = r.module_id WHERE f.gateway_id = $1::bigint AND f.device_id = beeeon.to_device_id($2) AND f.module_id = $3::smallint
controls_fsm.cancel_unfinished = UPDATE beeeon.controls_fsm SET finished_at = NOW(), failed = true WHERE finished_at IS NULL
