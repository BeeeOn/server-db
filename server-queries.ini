[beeeon]
devices_properties.insert  = INSERT INTO beeeon.device_properties(device_id, gateway_id, key, value, params) VALUES (beeeon.to_device_id($1), $2, $3, $4, $5)
devices_properties.update  = UPDATE beeeon.device_properties SET value = $1, params = $2 WHERE device_id = beeeon.to_device_id($3) AND gateway_id = $4 AND key = $5
devices_properties.remove  = DELETE FROM beeeon.device_properties WHERE device_id = beeeon.to_device_id($1) AND gateway_id = $2 AND key = $3
devices_properties.fetch   = SELECT beeeon.from_device_id(device_id), gateway_id, key, value, params FROM beeeon.device_properties WHERE device_id = beeeon.to_device_id($1) AND gateway_id = $2 AND key = $3
devices_properties.fetch_by_device = SELECT beeeon.from_device_id(device_id), gateway_id, key, value, params FROM beeeon.device_properties WHERE device_id = beeeon.to_device_id($1) AND gateway_id = $2

sensors_history.insert = INSERT INTO beeeon.sensor_history_recent (gateway_id, device_id, module_id, at, value) VALUES ($1::bigint, beeeon.to_device_id($2::numeric(20, 0)), $3::smallint, beeeon.as_utc_timestamp_us($4), $5::real)
sensors_history.fetch = SELECT extract(epoch FROM at)::bigint, value FROM beeeon.sensor_history_last WHERE gateway_id = $1 AND device_id = beeeon.to_device_id($2) AND module_id = $3
sensors_history.fetch_huge_interval = SELECT * FROM beeeon.sensor_history_recent_aggregate($1::bigint, $2::numeric(20, 0), $3::smallint, $4::bigint, $5::bigint, $6::bigint)
sensors_history.huge_fetch_raw = SELECT extract(epoch FROM s.at)::bigint, s.value FROM beeeon.sensor_history_recent AS s WHERE s.gateway_id = $1::bigint AND s.device_id = beeeon.to_device_id($2::numeric(20, 0)) AND s.module_id = $3::smallint AND beeeon.as_utc_timestamp($4::bigint) <= s.at AND s.at < beeeon.as_utc_timestamp($5::bigint) ORDER BY s.at
sensors_history.huge_fetch_agg = WITH input AS (SELECT $1::bigint AS gateway_id, $2::numeric(20, 0) AS device_id, $3::smallint AS module_id, beeeon.as_utc_timestamp($4::bigint) AS start_ts, beeeon.as_utc_timestamp($5::bigint) AS end_ts, $6::bigint AS secs_interval) SELECT extract(epoch FROM s.at - interval '1 second' * ((60 * date_part('minute', s.at)::bigint + date_part('second', s.at)::bigint) % input.secs_interval))::bigint AS at, AVG(s.value)::real AS avg, MIN(s.value)::real AS min, MAX(s.value)::real AS max FROM beeeon.sensor_history_recent AS s, input WHERE s.gateway_id = input.gateway_id AND s.device_id = beeeon.to_device_id(input.device_id) AND s.module_id = input.module_id AND input.start_ts <= s.at AND s.at < input.end_ts AND s.value IS NOT NULL GROUP BY 1 ORDER BY 1

controls_fsm.insert_request = INSERT INTO beeeon.controls_fsm (gateway_id, device_id, module_id, value, requested_at, accepted_at, finished_at, failed, originator_user_id) VALUES ($1::bigint, beeeon.to_device_id($2::numeric(20, 0)), $3::smallint, $4::real, beeeon.as_utc_timestamp_us($5), beeeon.as_utc_timestamp_us($6), beeeon.as_utc_timestamp_us($7), $8::boolean, $9::uuid)
controls_fsm.update_request = UPDATE beeeon.controls_fsm SET accepted_at = beeeon.as_utc_timestamp_us($1), finished_at = beeeon.as_utc_timestamp_us($2), failed = $3::boolean WHERE gateway_id = $4::bigint AND device_id = beeeon.to_device_id($5::numeric(20, 0)) AND module_id = $6 AND requested_at = beeeon.as_utc_timestamp_us($7)
controls_fsm.fetch_last = SELECT f.value as requested_value, (extract(epoch from f.requested_at) * 1000000)::bigint AS requested_at, (extract(epoch from f.accepted_at) * 1000000)::bigint AS accepted_at, (extract(epoch from f.finished_at) * 1000000)::bigint AS finished_at, f.failed AS failed, f.originator_user_id AS originator_user_id, (extract(epoch from r.at) * 1000000)::bigint AS recent_at, r.value AS recent_value FROM beeeon.controls_fsm_last f FULL OUTER JOIN beeeon.sensor_history_last r ON f.gateway_id = r.gateway_id AND f.device_id = r.device_id AND f.module_id = r.module_id WHERE f.gateway_id = $1::bigint AND f.device_id = beeeon.to_device_id($2) AND f.module_id = $3::smallint
controls_fsm.cancel_unfinished = UPDATE beeeon.controls_fsm SET finished_at = beeeon.now_utc(), failed = true WHERE finished_at IS NULL
